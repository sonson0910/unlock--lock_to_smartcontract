"""
Script ƒë·ªÉ unlock c√°c UTXO t·ª´ contract s·ª≠ d·ª•ng datum_hash.

C·∫£nh b√°o: Script n√†y y√™u c·∫ßu t√°i t·∫°o ch√≠nh x√°c c√°c ƒë·ªëi t∆∞·ª£ng Datum g·ªëc
ƒë√£ ƒë∆∞·ª£c hash, bao g·ªìm c·∫£ c√°c gi√° tr·ªã slot ch√≠nh x√°c ƒë∆∞·ª£c s·ª≠ d·ª•ng
khi t·∫°o UTXO ban ƒë·∫ßu. N·∫øu c√°c gi√° tr·ªã slot kh√¥ng kh·ªõp, hash s·∫Ω
kh√¥ng kh·ªõp v√† giao d·ªãch s·∫Ω th·∫•t b·∫°i.
"""

import logging
import os
import sys
import asyncio
from pathlib import Path
from dataclasses import dataclass
from typing import Optional, Tuple, List

# --- Import t·ª´ pycardano ---
from pycardano import (
    Network,
    Address,
    PaymentSigningKey,
    PaymentVerificationKey,
    ExtendedSigningKey,
    PlutusData,
    PlutusV3Script,
    Redeemer,
    ScriptHash,
    TransactionBuilder,
    TransactionOutput,
    UTxO,
    BlockFrostChainContext,
    TransactionId,
    VerificationKeyHash,
    Value
)

# --- Th√™m ƒë∆∞·ªùng d·∫´n g·ªëc c·ªßa project v√†o sys.path --- 
# (Gi·∫£ s·ª≠ script n√†y n·∫±m trong c√πng th∆∞ m·ª•c scripts)
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))
# -------------------------------------------------

# --- Import t·ª´ SDK Moderntensor (C·∫ßn thi·∫øt cho Datum v√† Context) ---
try:
    from sdk.metagraph.metagraph_datum import (
        SubnetStaticDatum,
        SubnetDynamicDatum,
        DATUM_INT_DIVISOR # C·∫ßn cho vi·ªác t√°i t·∫°o datum ƒë·ªông
    )
    from sdk.service.context import get_chain_context
    from sdk.keymanager.decryption_utils import decode_hotkey_skey
    from sdk.smartcontract.validator import (
        read_validator_dynamic_subnet, # D√πng ƒë·ªÉ l·∫•y hash c·ªßa script dynamic
        read_validator_static_subnet,  # D√πng ƒë·ªÉ l·∫•y hash c·ªßa script static
    )
    from sdk.config.settings import settings as sdk_settings
except ImportError as e:
    print(f"‚ùå FATAL: Import Error in unlock_all_datum_hash.py: {e}")
    print("   Ensure this script is run from the correct directory or PYTHONPATH is set.")
    sys.exit(1)

# --- C·∫•u h√¨nh Logging --- 
# (B·∫°n c√≥ th·ªÉ th√™m RichHandler n·∫øu mu·ªën)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
# ------------------------

# --- Constants & Configuration (L·∫•y t·ª´ create_subnet_utxos.py v√† ƒëi·ªÅu ch·ªânh) ---
SUBNET_NET_UID = 1 # Ph·∫£i kh·ªõp v·ªõi gi√° tr·ªã khi t·∫°o datum

# *** THAY ƒê·ªîI C√ÅC GI√Å TR·ªä SLOT N√ÄY CHO KH·ªöP V·ªöI L·∫¶N CH·∫†Y create_subnet_utxos.py ***
# !!! QUAN TR·ªåNG: N·∫øu c√°c slot n√†y kh√¥ng ch√≠nh x√°c, hash s·∫Ω kh√¥ng kh·ªõp !!!
# B·∫°n c√≥ th·ªÉ c·∫ßn l·∫•y gi√° tr·ªã n√†y t·ª´ log c·ªßa l·∫ßn ch·∫°y tr∆∞·ªõc ho·∫∑c t·ª´ blockchain explorer.
CREATION_SLOT_USED = 89289221 # <<< THAY TH·∫æ B·∫∞NG SLOT TH·ª∞C T·∫æ KHI T·∫†O STATIC DATUM
LAST_UPDATE_SLOT_USED = 89289221 # <<< THAY TH·∫æ B·∫∞NG SLOT TH·ª∞C T·∫æ KHI T·∫†O DYNAMIC DATUM
# ---------------------------------------------------------------------------------

# Th√¥ng tin v√≠ d√πng ƒë·ªÉ k√Ω giao d·ªãch unlock (gi·ªëng funding key trong create_subnet_utxos)
hotkey_base_dir = os.getenv("HOTKEY_BASE_DIR", getattr(sdk_settings, 'HOTKEY_BASE_DIR', '.'))
funding_coldkey_name = os.getenv("FUNDING_COLDKEY_NAME", "kickoff")
funding_hotkey_name = os.getenv("FUNDING_HOTKEY_NAME", "hk1")
funding_password_env_var = "SUBNET1_HOTKEY_PASSWORD2"
funding_password = os.getenv(funding_password_env_var, "sonlearn2003") # L·∫•y m·∫≠t kh·∫©u

# --- Helper Functions (Load key, get network - T∆∞∆°ng t·ª± create_subnet_utxos) ---
def get_network() -> Network:
    network_str = (os.getenv("CARDANO_NETWORK") or getattr(sdk_settings, 'CARDANO_NETWORK', 'TESTNET')).upper()
    return Network.MAINNET if network_str == "MAINNET" else Network.TESTNET

def load_signing_keys(
    base_dir: str, coldkey_name: str, hotkey_name: str, password: str, network: Network
) -> Tuple[ExtendedSigningKey, VerificationKeyHash, Address]:
    """Loads signing keys, derives VKey hash and address."""
    logger.info(f"üîë Loading signing keys (Cold: '{coldkey_name}', Hot: '{hotkey_name}')...")
    try:
        payment_esk, stake_esk = decode_hotkey_skey(base_dir, coldkey_name, hotkey_name, password)
        if not payment_esk: raise ValueError("Failed to decode payment key")
        payment_vk = payment_esk.to_verification_key()
        owner_vkh = payment_vk.hash() # L·∫•y VerificationKeyHash
        stake_vk = stake_esk.to_verification_key() if stake_esk else None
        signing_address = Address(owner_vkh, stake_vk.hash() if stake_vk else None, network=network)
        logger.info(f"‚úÖ Signing keys loaded. Address: {signing_address}")
        return payment_esk, owner_vkh, signing_address
    except Exception as e:
        logger.exception(f"üí• Failed to load signing keys: {e}")
        raise

# --- Redeemer Definition (Gi·∫£ s·ª≠ d√πng Redeemer ƒë∆°n gi·∫£n) ---
@dataclass
class SimpleRedeemer(PlutusData):
    """
    Simple Redeemer structure (CONSTR_ID = 0).
    Adjust if your validator requires a different structure.
    """
    CONSTR_ID = 0

# === H√†m Unlock Ch√≠nh ===
async def unlock_datum_hash(
    utxos_to_check: list[UTxO],
    static_script: PlutusV3Script,
    dynamic_script: PlutusV3Script, # C·∫ßn c·∫£ 2 script v√¨ ch√∫ng c√≥ th·ªÉ kh√°c nhau
    static_script_hash: ScriptHash,
    dynamic_script_hash: ScriptHash,
    expected_static_datum: SubnetStaticDatum,
    expected_dynamic_datum: SubnetDynamicDatum,
    redeemer_data: PlutusData,
    signing_key: ExtendedSigningKey,
    owner_vkh: VerificationKeyHash,
    signing_address: Address, # ƒê·ªãa ch·ªâ ƒë·ªÉ nh·∫≠n l·∫°i ti·ªÅn v√† tr·∫£ ph√≠
    context: BlockFrostChainContext,
) -> Optional[TransactionId]:
    """
    Attempts to unlock UTxOs that were created using datum_hash.
    Requires the exact original Datum objects to be provided.
    """
    logger.info("üîß Starting unlock process for UTxOs with datum_hash...")
    builder = TransactionBuilder(context=context)
    unlocked_count = 0
    total_value_unlocked = Value(0)
    added_inputs = set() # <<< Set ƒë·ªÉ theo d√µi c√°c input ƒë√£ th√™m

    # T√≠nh hash c·ªßa c√°c datum mong ƒë·ª£i
    expected_static_hash = expected_static_datum.hash()
    expected_dynamic_hash = expected_dynamic_datum.hash()
    logger.info(f"  - Expected Static Datum Hash: {expected_static_hash.payload.hex()}")
    logger.info(f"  - Expected Dynamic Datum Hash: {expected_dynamic_hash.payload.hex()}")

    # Input t·ª´ v√≠ ƒë·ªÉ tr·∫£ ph√≠ v√† collateral
    logger.info(f"  - Adding input address for fees/collateral: {signing_address}")
    builder.add_input_address(signing_address)

    # L·∫∑p qua c√°c UTXO t√¨m ƒë∆∞·ª£c
    for utxo in utxos_to_check:
        # T·∫°o ƒë·ªãnh danh duy nh·∫•t cho UTXO
        utxo_id = (utxo.input.transaction_id, utxo.input.index)

        # B·ªè qua n·∫øu UTXO n√†y ƒë√£ ƒë∆∞·ª£c th√™m
        if utxo_id in added_inputs:
            logger.debug(f"  ‚è© Skipping already processed UTXO: {utxo.input}")
            continue

        # Ch·ªâ x·ª≠ l√Ω UTXO c√≥ datum_hash v√† kh√¥ng c√≥ inline datum
        if utxo.output.datum is None and utxo.output.datum_hash is not None:
            logger.debug(f"  üîé Checking UTXO {utxo.input} with datum_hash: {utxo.output.datum_hash.payload.hex()}")

            # X√°c ƒë·ªãnh xem hash n√†y kh·ªõp v·ªõi datum n√†o
            matched_datum: Optional[PlutusData] = None
            script_to_use: Optional[PlutusV3Script] = None
            is_static_match = False
            is_dynamic_match = False

            # T√≠nh to√°n hash c·ªßa datum t√°i t·∫°o M·ªòT L·∫¶N ƒë·ªÉ so s√°nh
            try:
                reconstructed_static_hash_check = expected_static_datum.hash()
                reconstructed_dynamic_hash_check = expected_dynamic_datum.hash()
                logger.debug(f"    Reconstructed Static Hash for check: {reconstructed_static_hash_check.payload.hex()}")
                logger.debug(f"    Reconstructed Dynamic Hash for check: {reconstructed_dynamic_hash_check.payload.hex()}")
            except Exception as hash_err:
                logger.error(f"    ‚ùå Error hashing reconstructed datums: {hash_err}. Skipping UTXO {utxo.input}")
                continue

            if utxo.output.datum_hash == reconstructed_static_hash_check:
                matched_datum = expected_static_datum
                is_static_match = True
                logger.info(f"    ‚úÖ Found potential match with expected Static Datum Hash for UTXO {utxo.input}")
            elif utxo.output.datum_hash == reconstructed_dynamic_hash_check:
                matched_datum = expected_dynamic_datum
                is_dynamic_match = True
                logger.info(f"    ‚úÖ Found potential match with expected Dynamic Datum Hash for UTXO {utxo.input}")
            else:
                logger.warning(f"    ‚ö†Ô∏è UTXO {utxo.input} datum_hash ({utxo.output.datum_hash.payload.hex()}) does not match reconstructed static or dynamic hash. Skipping.")
                continue

            # Ki·ªÉm tra xem script n√†o th·ª±c s·ª± c·∫ßn d√πng (d·ª±a tr√™n ƒë·ªãa ch·ªâ UTXO)
            utxo_address = utxo.output.address
            if utxo_address.payment_part == static_script_hash:
                 # Ch·ªâ ch·∫•p nh·∫≠n n·∫øu hash kh·ªõp v·ªõi static datum V√Ä ƒë·ªãa ch·ªâ l√† static script
                 if not is_static_match:
                      logger.warning(f"    ‚ö†Ô∏è UTXO {utxo.input} is at STATIC address but hash matches DYNAMIC datum reconstruction. Inconsistent state. Skipping.")
                      continue
                 script_to_use = static_script
                 logger.debug(f"      UTXO address matches static script hash.")
            elif utxo_address.payment_part == dynamic_script_hash:
                 # Ch·ªâ ch·∫•p nh·∫≠n n·∫øu hash kh·ªõp v·ªõi dynamic datum V√Ä ƒë·ªãa ch·ªâ l√† dynamic script
                 if not is_dynamic_match:
                      logger.warning(f"    ‚ö†Ô∏è UTXO {utxo.input} is at DYNAMIC address but hash matches STATIC datum reconstruction. Inconsistent state. Skipping.")
                      continue
                 script_to_use = dynamic_script
                 logger.debug(f"      UTXO address matches dynamic script hash.")
            else:
                 logger.error(f"      ‚ùå UTXO {utxo.input} address {utxo_address} does not match known script hashes! Skipping.")
                 continue # Kh√¥ng th·ªÉ unlock n·∫øu kh√¥ng bi·∫øt script

            if script_to_use and matched_datum:
                logger.info(f"    ‚ûï Adding script input: UTXO={utxo.input}, Script={script_to_use.__class__.__name__}, Datum={matched_datum.__class__.__name__}")
                # Log CBOR c·ªßa datum s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng
                logger.info(f"      Using Datum CBOR: {matched_datum.to_cbor_hex()}") 
                try:
                    builder.add_script_input(
                        utxo=utxo,
                        script=script_to_use,
                        datum=matched_datum, # Cung c·∫•p datum g·ªëc ƒë√£ t√°i t·∫°o
                        redeemer=Redeemer(data=redeemer_data)
                    )
                    added_inputs.add(utxo_id) # <<< ƒê√°nh d·∫•u UTXO ƒë√£ th√™m
                    unlocked_count += 1
                    total_value_unlocked += utxo.output.amount
                except Exception as add_err:
                    logger.error(f"    ‚ùå Error adding script input for {utxo.input}: {add_err}")
        else:
            logger.debug(f"  ‚è≠Ô∏è Skipping UTXO {utxo.input} (has inline datum or no datum_hash).")

    # N·∫øu kh√¥ng c√≥ UTXO n√†o h·ª£p l·ªá ƒë∆∞·ª£c th√™m v√†o
    if unlocked_count == 0:
        logger.warning("‚ö†Ô∏è No UTxOs with matching datum_hash found or added successfully. Nothing to unlock.")
        return None

    logger.info(f"‚úÖ Added {unlocked_count} script inputs to the transaction.")
    logger.info(f"   Total value to unlock: {total_value_unlocked.coin / 1_000_000} ADA")

    # Th√™m output ƒë·ªÉ nh·∫≠n l·∫°i ti·ªÅn
    # L∆∞u √Ω: Ch√∫ng ta c·∫ßn ƒë·∫£m b·∫£o output n√†y ƒë·ªß l·ªõn ƒë·ªÉ h·ª£p l·ªá
    # C√°ch ƒë∆°n gi·∫£n l√† g·ª≠i to√†n b·ªô v·ªÅ ƒë·ªãa ch·ªâ c≈©, builder s·∫Ω t√≠nh to√°n change
    # builder.add_output(TransactionOutput(signing_address, total_value_unlocked)) # C√≥ th·ªÉ g√¢y l·ªói n·∫øu total < minUTXO

    # Ch·ªâ ƒë·ªãnh ng∆∞·ªùi k√Ω
    builder.required_signers = [owner_vkh]

    # Build, sign, submit
    try:
        logger.info("‚úçÔ∏è Building and signing the unlock transaction...")
        signed_tx = builder.build_and_sign(
            signing_keys=[signing_key],
            change_address=signing_address # G·ª≠i ti·ªÅn th·ª´a v·ªÅ ƒë√¢y
        )
        logger.info(f"   Transaction built. Fee: {signed_tx.transaction_body.fee / 1_000_000} ADA")

        logger.info(f"üì§ Submitting unlock transaction...")
        # tx_id = context.submit_tx(signed_tx.to_cbor())
        # S·ª≠ d·ª•ng asyncio.to_thread n·∫øu submit_tx kh√¥ng ph·∫£i async
        # Ho·∫∑c ki·ªÉm tra xem context.submit_tx c√≥ ph·∫£i l√† async kh√¥ng
        if asyncio.iscoroutinefunction(context.submit_tx):
             tx_id = await context.submit_tx(signed_tx.to_cbor()) # type: ignore
        else:
             tx_id = await asyncio.to_thread(context.submit_tx, signed_tx.to_cbor()) # type: ignore

        tx_id_str = str(tx_id)
        logger.info(f"‚úÖ Unlock transaction submitted! Tx Hash: [bold green]{tx_id_str}[/]")
        network = context.network
        scan_url = f"https://preprod.cardanoscan.io/transaction/{tx_id_str}" if network == Network.TESTNET else f"https://cardanoscan.io/transaction/{tx_id_str}"
        logger.info(f"   View on Cardanoscan ({network.name}): [link={scan_url}]{scan_url}[/link]")
        return tx_id
    except Exception as submit_err:
        logger.exception(f"üí• Error building/signing/submitting unlock transaction: {submit_err}")
        return None

# === Main Execution Block ===
async def main():
    logger.info("‚ú® --- Starting Datum Hash Unlock Script --- ‚ú®")
    context: Optional[BlockFrostChainContext] = None
    signing_esk: Optional[ExtendedSigningKey] = None
    owner_vkh: Optional[VerificationKeyHash] = None
    signing_address: Optional[Address] = None
    static_script_info: Optional[dict] = None
    dynamic_script_info: Optional[dict] = None

    try:
        network = get_network()
        context = get_chain_context(method="blockfrost")
        if not context: raise RuntimeError("Failed to get Blockfrost context")
        logger.info(f"üîó Context initialized for network: {context.network.name}")

        signing_esk, owner_vkh, signing_address = load_signing_keys(
            hotkey_base_dir, funding_coldkey_name, funding_hotkey_name, funding_password, network # type: ignore
        )

        # Load c·∫£ hai validator ƒë·ªÉ l·∫•y script v√† hash
        static_script_info = read_validator_static_subnet()
        dynamic_script_info = read_validator_dynamic_subnet()
        if not static_script_info or not dynamic_script_info:
            raise RuntimeError("Failed to load static or dynamic validator info.")
        
        static_script = static_script_info['script_bytes']
        static_script_hash = static_script_info['script_hash']
        dynamic_script = dynamic_script_info['script_bytes']
        dynamic_script_hash = dynamic_script_info['script_hash']

        static_contract_address = Address(static_script_hash, network=context.network)
        dynamic_contract_address = Address(dynamic_script_hash, network=context.network)
        logger.info(f"  Static Contract Address: {static_contract_address}")
        logger.info(f"  Dynamic Contract Address: {dynamic_contract_address}")

        # T√°i t·∫°o ch√≠nh x√°c c√°c ƒë·ªëi t∆∞·ª£ng Datum
        logger.info("üîß Reconstructing original Datum objects...")
        # L·∫•y owner_address_hash_bytes t·ª´ owner_vkh ƒë√£ load
        owner_address_hash_bytes = owner_vkh.payload 

        # --- !! QUAN TR·ªåNG !! --- 
        # Gi√° tr·ªã slot ph·∫£i kh·ªõp v·ªõi l√∫c t·∫°o UTXO g·ªëc
        # N·∫øu kh√¥ng ch·∫Øc, h√£y ki·ªÉm tra log ho·∫∑c explorer
        # ---------------------------
        reconstructed_static_datum = SubnetStaticDatum(
            net_uid=SUBNET_NET_UID,
            name=f"ModernTensor Subnet {SUBNET_NET_UID} - Image Generation".encode('utf-8'), # Ph·∫£i gi·ªëng h·ªát
            owner_addr_hash=owner_address_hash_bytes,
            max_miners=1024, max_validators=128, immunity_period_slots=17280,
            creation_slot=CREATION_SLOT_USED, # <<< D√ôNG SLOT ƒê√É C·∫§U H√åNH
            description=f"Decentralized image generation services for Subnet {SUBNET_NET_UID}".encode('utf-8'), # Ph·∫£i gi·ªëng h·ªát
            version=1,
            min_stake_miner=500 * 1_000_000, min_stake_validator=2000 * 1_000_000
        )
        logger.info(f"  Reconstructed Static Datum (creation_slot={CREATION_SLOT_USED}) - Hash: {reconstructed_static_datum.hash().payload.hex()}")

        reconstructed_dynamic_datum = SubnetDynamicDatum(
            net_uid=SUBNET_NET_UID,
            scaled_weight=int(1.0 * DATUM_INT_DIVISOR),
            scaled_performance=int(0.0 * DATUM_INT_DIVISOR),
            current_epoch=0, registration_open=True, reg_cost=10 * 1_000_000,
            scaled_incentive_ratio=int(0.5 * DATUM_INT_DIVISOR),
            last_update_slot=LAST_UPDATE_SLOT_USED, # <<< D√ôNG SLOT ƒê√É C·∫§U H√åNH
            total_stake=0, validator_count=0, miner_count=0
        )
        logger.info(f"  Reconstructed Dynamic Datum (last_update_slot={LAST_UPDATE_SLOT_USED}) - Hash: {reconstructed_dynamic_datum.hash().payload.hex()}")

        # L·∫•y UTXO t·ª´ c·∫£ hai ƒë·ªãa ch·ªâ contract
        logger.info(f"üîç Fetching UTxOs from Static address: {static_contract_address}...")
        static_utxos = context.utxos(str(static_contract_address))
        logger.info(f"üîç Fetching UTxOs from Dynamic address: {dynamic_contract_address}...")
        dynamic_utxos = context.utxos(str(dynamic_contract_address))
        
        all_utxos = static_utxos + dynamic_utxos
        logger.info(f"  Found {len(static_utxos)} UTxOs at static address, {len(dynamic_utxos)} UTxOs at dynamic address. Total: {len(all_utxos)}")

        if not all_utxos:
            logger.warning("No UTxOs found at either contract address. Exiting.")
            return

        # Chu·∫©n b·ªã Redeemer (Gi·∫£ s·ª≠ SimpleRedeemer l√† ƒë·ªß)
        redeemer_data = SimpleRedeemer()

        # G·ªçi h√†m unlock
        await unlock_datum_hash(
            utxos_to_check=all_utxos,
            static_script=static_script,
            dynamic_script=dynamic_script,
            static_script_hash=static_script_hash,
            dynamic_script_hash=dynamic_script_hash,
            expected_static_datum=reconstructed_static_datum,
            expected_dynamic_datum=reconstructed_dynamic_datum,
            redeemer_data=redeemer_data,
            signing_key=signing_esk,
            owner_vkh=owner_vkh,
            signing_address=signing_address,
            context=context
        )

    except Exception as e:
        logger.exception(f"üí• An error occurred in the main execution block: {e}")
        sys.exit(1)

# --- Run Main Async Function --- 
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("\nScript interrupted by user.")
    # except Exception as e:
    #     logger.exception(f"Failed to run main: {e}") 